<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="T:Polybrush.z_BrushMirrorUtility">
            Helper functions for working with Mirror enum.
        </member>
        <member name="M:Polybrush.z_BrushMirrorUtility.ToVector3(Polybrush.z_BrushMirror)">
            Convert a mirror enum to it's corresponding vector value.
        </member>
        <member name="T:Polybrush.z_ComponentIndex">
            RGBA / XYZW / 0123
        </member>
        <member name="T:Polybrush.Culling">
            Describes different culling options.
        </member>
        <member name="T:Polybrush.z_Direction">
            Describes the different directions in which the brush tool can move vertices.
        </member>
        <member name="T:Polybrush.z_DirectionUtil">
            Helper methods for working with Direction.
        </member>
        <member name="M:Polybrush.z_DirectionUtil.ToVector3(Polybrush.z_Direction)">
            Convert a direction to a vector.  If dir is Normal, 0 is returned.
        </member>
        <member name="T:Polybrush.z_MeshChannel">
            Mesh property map.
        </member>
        <member name="T:Polybrush.z_MirrorCoordinateSpace">
            Describes the difference coordinate spaces that a vector may be flipped in.
        </member>
        <member name="T:Polybrush.z_ModelSource">
            Describes the origin of a mesh.
        </member>
        <member name="T:Polybrush.z_PaintMode">
            Describes different mesh painting modes.
        </member>
        <member name="T:Polybrush.z_PlacementDirection">
            How prefabs should be oriented when placed on a surface.
        </member>
        <member name="T:Polybrush.z_SelectionRenderState">
            Describes the origin of a mesh.
        </member>
        <member name="T:Polybrush.z_AdditionalVertexStreams">
            	Workaround for bug in `MeshRenderer.additionalVertexStreams`.
            
            	Namely, the mesh is not persistent in the editor and needs to be "refreshed" constantly.
            
            		- https://issuetracker.unity3d.com/issues/meshrenderer-dot-additionalvertexstreams-collapse-static-meshes
            		- https://issuetracker.unity3d.com/issues/api-mesh-cannot-change-vertex-colors-using-meshrender-dot-additionalvertexstreams
            		- https://issuetracker.unity3d.com/issues/meshrenderer-dot-additionalvertexstreams-discards-data-if-set-in-awake
            		- https://issuetracker.unity3d.com/issues/meshrenderer-dot-additionalvertexstreams-looses-color-fast-in-editor
        </member>
        <member name="T:Polybrush.z_OverlayRenderer">
            An editor-only script that renders a mesh and material list in the scene view only.
        </member>
        <member name="M:Polybrush.z_OverlayRenderer.SetWeights(System.Single[],System.Single)">
            Set the vertex colors to match the brush weights.
        </member>
        <member name="T:Polybrush.z_ZoomOverride">
            Overrides the default scene zoom with the current values.
        </member>
        <member name="M:Polybrush.z_ZoomOverride.OnVerticesMoved(Polybrush.z_Mesh)">
            Let the temp mesh know that vertex positions have changed.
        </member>
        <member name="T:Polybrush.z_AttributeLayoutContainer">
            JsonUtility cannot serialize arrays, but can handle classes with arrays.
        </member>
        <member name="T:Polybrush.z_AttributeLayout">
            z_AttributeLayout defines how Polybrush applies a value to a mesh.
        </member>
        <member name="T:Polybrush.z_CommonEdge">
            Contains z_Edge with it's accompanying common lookup edge.
        </member>
        <member name="M:Polybrush.z_CommonEdge.ToList(System.Collections.Generic.IEnumerable{Polybrush.z_CommonEdge})">
            Returns a new list of indices by selecting the x,y of each edge (discards common).
        </member>
        <member name="M:Polybrush.z_CommonEdge.ToHashSet(System.Collections.Generic.IEnumerable{Polybrush.z_CommonEdge})">
            Returns a new hashset of indices by selecting the x,y of each edge (discards common).
        </member>
        <member name="T:Polybrush.z_IHasDefault">
            Interface for objects that contain a set of default values.
        </member>
        <member name="M:Polybrush.z_IHasDefault.SetDefaultValues">
            Set this object to use default values.
        </member>
        <member name="T:Polybrush.z_IValid">
            Interface for objects that may be null or otherwise invalid for use.
            \sa z_EditableObject, z_BrushTarget, z_Util.IsValid
        </member>
        <!-- Badly formed XML comment ignored for member "T:Polybrush.z_Mesh" -->
        <member name="M:Polybrush.z_Mesh.ApplyAttributesToUnityMesh(UnityEngine.Mesh,Polybrush.z_MeshChannel)">
            Apply the vertex attributes to a UnityEngine mesh (does not set triangles)
        </member>
        <member name="T:Polybrush.z_RndVec3">
            Vector3 that is sortable and equatable by a rounded value (resolution).
        </member>
        <member name="M:Polybrush.z_SplatSet.#ctor(System.Int32,Polybrush.z_AttributeLayout[],System.Boolean)">
            Initialize a new SplatSet with vertex count and attribute layout.  Attributes should
            match the length of weights applied (one attribute per value).
            Weight values are initialized to zero (unless preAlloc is false, then only the channel
            container array is initialized and arrays aren't allocated)
        </member>
        <member name="M:Polybrush.z_SplatSet.#ctor(Polybrush.z_SplatSet)">
            Copy constructor.
        </member>
        <member name="M:Polybrush.z_SplatSet.#ctor(Polybrush.z_Mesh,Polybrush.z_AttributeLayout[])">
            Initialize a SplatSet with mesh and attribute layout.
        </member>
        <member name="M:Polybrush.z_SplatSet.LerpWeights(Polybrush.z_SplatSet,Polybrush.z_SplatSet,System.Int32,System.Single[])">
            Lerp each attribute value with matching `mask` to `rhs`.
            weights, lhs, and rhs must have matching layout attributes.
        </member>
        <member name="M:Polybrush.z_SplatWeight.#ctor(Polybrush.z_SplatWeight)">
            Deep copy constructor.
        </member>
        <member name="M:Polybrush.z_SplatWeight.CopyTo(Polybrush.z_SplatWeight)">
            Copy values array to another splatweight.  This function doesn't check
            that attribute layouts are matching; musht do this yourself.
        </member>
        <member name="T:Polybrush.z_Math">
            Geometry math and Array extensions.
        </member>
        <member name="M:Polybrush.z_Math.RayIntersectsTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single@,UnityEngine.Vector3@)">
            Returns true if a raycast intersects a triangle.
            http://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
            http://www.cs.virginia.edu/~gfx/Courses/2003/ImageSynthesis/papers/Acceleration/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf
        </member>
        <member name="M:Polybrush.z_Math.Normal(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            Calculate the unit vector normal of 3 points:  B-A x C-A
        </member>
        <member name="M:Polybrush.z_Math.Normal(UnityEngine.Vector3[])">
            If p.Length % 3 == 0, finds the normal of each triangle in a face and returns the average.
            Otherwise return the normal of the first three points.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Polybrush.z_Math.NormalTangentBitangent(UnityEngine.Vector3[],UnityEngine.Vector2[],System.Int32[],UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)" -->
        <member name="M:Polybrush.z_Math.Average(UnityEngine.Vector3[],System.Collections.Generic.IEnumerable{System.Int32})">
            		 *	Average of a Vector3[].
            
        </member>
        <member name="M:Polybrush.z_Math.WeightedAverage(UnityEngine.Vector3[],System.Collections.Generic.IList{System.Int32},System.Single[])">
            Returns a weighted average from values @array, @indices, and a lookup table of index weights.
        </member>
        <member name="M:Polybrush.z_Math.VectorIsUniform(UnityEngine.Vector3)">
            True if all elements of a vector are equal.
        </member>
        <member name="T:Polybrush.z_MeshUtility">
            Static helper functions for working with meshes.
        </member>
        <member name="M:Polybrush.z_MeshUtility.DeepCopy(UnityEngine.Mesh)">
            Duplicate @src and return the copy.
        </member>
        <member name="M:Polybrush.z_MeshUtility.Copy(UnityEngine.Mesh,UnityEngine.Mesh)">
            Copy @src mesh values to @dest
        </member>
        <member name="M:Polybrush.z_MeshUtility.CreateOverlayMesh(Polybrush.z_Mesh)">
            Creates a new mesh using only the @src positions, normals, and a new color array.
        </member>
        <member name="M:Polybrush.z_MeshUtility.GetSmoothNormalLookup(Polybrush.z_Mesh)">
            Builds a lookup table for each vertex index and it's average normal with other vertices sharing a position.
        </member>
        <member name="F:Polybrush.z_MeshUtility.commonVerticesCache">
            Store a temporary cache of common vertex indices.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Polybrush.z_MeshUtility.GetCommonVertices(Polybrush.z_Mesh)" -->
        <member name="M:Polybrush.z_MeshUtility.GetNonManifoldIndices(Polybrush.z_Mesh)">
            Returns all vertex indices that are on an open edge.
        </member>
        <member name="M:Polybrush.z_MeshUtility.GetAdjacentVertices(Polybrush.z_Mesh)">
            Builds a lookup with each vertex index and a list of all neighboring indices.
        </member>
        <member name="M:Polybrush.z_MeshUtility.GetAdjacentTriangles(Polybrush.z_Mesh)">
            Returns a dictionary where each z_Edge is mapped to a list of triangle indices that share that edge.
            To translate triangle list to vertex indices, multiply by 3 and take those indices (ex, triangles[index+{0,1,2}])
        </member>
        <member name="M:Polybrush.z_MeshUtility.GetSmoothSeamLookup(Polybrush.z_Mesh)">
            Vertices that are common, form a seam, and should be smoothed.
        </member>
        <member name="M:Polybrush.z_MeshUtility.RecalculateNormals(Polybrush.z_Mesh)">
            Recalculates a mesh's normals while retaining smoothed common vertices.
        </member>
        <member name="M:Polybrush.z_MeshUtility.Print(UnityEngine.Mesh,System.Int32)">
            Get a string of the values in mesh.
        </member>
        <member name="T:Polybrush.z_Util">
            General static helper functions.
        </member>
        <member name="M:Polybrush.z_Util.Fill``1(``0,System.Int32)">
            Returns a new array initialized with the @count and @value.
        </member>
        <member name="M:Polybrush.z_Util.Fill``1(System.Func{System.Int32,``0},System.Int32)">
            Returns a new array initialized with the @count and @value.
        </member>
        <member name="M:Polybrush.z_Util.InitDictionary``2(System.Func{System.Int32,``0},System.Func{System.Int32,``1},System.Int32)">
            Returns a new dictionary initialized with the @count and @value.
        </member>
        <member name="M:Polybrush.z_Util.SetValuesAsKey``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.IEnumerable{``1}})">
            	Returns a new dictionary with a key for every value and it's value set to the key that it came from.  Ex:
             {
             	{ 0, {1, 2, 3} },
              { 1, {4, 5, 6} }
             }
             becomes
             {
            	 {1, 0},
            	 {2, 0},
            	 {3, 0},
            	 {4, 1},
            	 {5, 1},
            	 {6, 1},
             }
        </member>
        <member name="M:Polybrush.z_Util.GetCommonLookup``1(System.Collections.Generic.List{System.Collections.Generic.List{``0}})">
            Similar to SetValuesAsKey except that instead of assigning the value to key, the value is instead the index.
        </member>
        <member name="M:Polybrush.z_Util.Lerp(UnityEngine.Color32,UnityEngine.Color32,Polybrush.z_ColorMask,System.Single)">
            Lerp between 2 colors.
        </member>
        <member name="M:Polybrush.z_Util.Lerp(UnityEngine.Color32,UnityEngine.Color32,System.Single)">
            Lerp between 2 colors.
        </member>
        <member name="M:Polybrush.z_Util.ClampAnimationKeys(UnityEngine.AnimationCurve,System.Single,System.Single,System.Single,System.Single)">
            Clamp an animation curve's first and last keys.
        </member>
        <member name="M:Polybrush.z_Util.IsValid``1(``0)">
            True if object is non-null and valid.
        </member>
        <member name="M:Polybrush.z_Util.IncrementPrefix(System.String,System.String)">
            Returns a new name with incremented prefix.
        </member>
        <member name="M:Polybrush.z_Util.GetMesh(UnityEngine.GameObject)">
            Get the mesh in use by either MeshFilter or SkinnedMeshRenderer
        </member>
        <!-- Badly formed XML comment ignored for member "M:Polybrush.z_Util.GetMaterials(UnityEngine.GameObject)" -->
        <member name="M:Polybrush.z_Util.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}})">
            Convert a list of IGrouping values to a dictionary.
        </member>
        <member name="M:Polybrush.z_Vector.Cross(UnityEngine.Vector3,UnityEngine.Vector3,System.Single@,System.Single@,System.Single@)">
            Non-allocating cross product.
            `ref` does not box with primitive types (https://msdn.microsoft.com/en-us/library/14akc2c7.aspx)
        </member>
        <member name="M:Polybrush.z_Vector.Subtract(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@)">
            res = b - a
        </member>
        <member name="T:ProBuilder2.Examples.IcoBumpin.FaceRef">
            Holds a pb_Face, the normal of that face, and the index of every vertex that touches it (sharedIndices).
        </member>
        <member name="M:ProBuilder2.Examples.IcoBumpin.Start">
            Creates the icosphere, and loads all the cache information.
        </member>
        <member name="M:ProBuilder2.Examples.IcoBumpin.RMS(System.Single[])">
            Root mean square is a good approximation of perceived loudness.
        </member>
        <member name="T:ProBuilder2.Examples.HueCube">
            Creates a cube on start and colors it's vertices programmitically.
        </member>
        <member name="M:ProBuilder2.Examples.HueCube.HSVtoRGB(System.Single,System.Single,System.Single)">
             Convert HSV to RGB.
              http://www.cs.rit.edu/~ncs/color/t_convert.html
            	r,g,b values are from 0 to 1
            	h = [0,360], s = [0,1], v = [0,1]
            	if s == 0, then h = -1 (undefined)
        </member>
        <member name="T:ProBuilder2.Examples.RuntimeEdit">
            \brief This class allows the user to select a single face at a time and move it forwards or backwards.
            More advanced usage of the ProBuilder API should make use of the pb_Object->SelectedFaces list to keep
            track of the selected faces.
        </member>
        <!-- Badly formed XML comment ignored for member "F:ProBuilder2.Examples.RuntimeEdit.pb_Selection.face" -->
        <!-- Badly formed XML comment ignored for member "M:ProBuilder2.Examples.RuntimeEdit.pb_Selection.#ctor(pb_Object,ProBuilder2.Common.pb_Face)" -->
        <member name="M:ProBuilder2.Examples.RuntimeEdit.Awake">
            \brief Wake up!
        </member>
        <member name="M:ProBuilder2.Examples.RuntimeEdit.OnGUI">
            \brief This is the usual Unity OnGUI method.  We only use it to show a 'Reset' button.
        </member>
        <member name="M:ProBuilder2.Examples.RuntimeEdit.SpawnCube">
            \brief Creates a new ProBuilder cube and sets it up with a concave MeshCollider.
        </member>
        <member name="M:ProBuilder2.Examples.RuntimeEdit.LateUpdate">
            \brief This is responsible for moving the camera around and not much else.
        </member>
        <member name="M:ProBuilder2.Examples.RuntimeEdit.Update">
            \brief The 'meat' of the operation.  This listens for a click event, then checks for a positive
            face selection.  If the click has hit a pb_Object, select it.
        </member>
        <member name="M:ProBuilder2.Examples.RuntimeEdit.FaceCheck(UnityEngine.Vector3)">
            \brief This is how we figure out what face is clicked.
        </member>
        <member name="T:ExtrudeRandomEdges">
            Do a snake-like thing with a quad and some extrudes.
        </member>
        <member name="M:ExtrudeRandomEdges.Start">
            Build a starting point (in this case, a quad)
        </member>
        <member name="T:HighlightNearestFace">
            	Move a sphere around the surface of a ProBuilder mesh, changing the
            	vertex color of the nearest face.
            
            	Scene setup:  Create a Unity Sphere primitive in a new scene, then attach
            	this script to the sphere.  Press 'Play'
        </member>
        <member name="M:HighlightNearestFace.FaceCenter(pb_Object,ProBuilder2.Common.pb_Face)">
            Returns the average of each vertex position in a face.
            In local space.
        </member>
        <member name="M:ProGrids.pg_Enum.InverseAxisMask(UnityEngine.Vector3,ProGrids.Axis)">
            Multiplies a Vector3 using the inverse value of an axis (eg, Axis.Y becomes Vector3(1, 0, 1) )
        </member>
        <member name="T:ProGrids.ProGridsNoSnapAttribute">
             ProGridsNoSnapAttribute tells ProGrids to skip snapping on this object.
            	Note - On Unity versions less than 5.2 this will not take effect until after a script
            	reload.
        </member>
        <member name="T:ProGrids.ProGridsConditionalSnapAttribute">
            ProGridsConditionalSnapAttribute tells ProGrids to check `bool IsSnapEnabled()` function on this object.
        </member>
        <member name="M:ProGrids.pg_Util.GetType(System.String,System.String)">
            Fetch a type with name and optional assembly name.  `type` should include namespace.
        </member>
        <member name="T:ProGrids.pg_IgnoreSnap">
            	Assign this script to a GameObject to tell ProGrids to ignore snapping on this object.
            	Child objects are still subject to snapping.
            
            	Note - On Unity versions less than 5.2 this will not take effect until after a script
            	reload.
        </member>
        <member name="T:pg_SceneMeshRender">
            Despite the MonoBehaviour inheritance, this is an Editor-only script.
        </member>
        <member name="M:CameraFade.SetScreenOverlayColor(UnityEngine.Color)">
            <summary>
            Sets the color of the screen overlay instantly.  Useful to start a fade.
            </summary>
            <param name='newScreenOverlayColor'>
            New screen overlay color.
            </param>
        </member>
        <member name="M:CameraFade.StartAlphaFade(UnityEngine.Color,System.Boolean,System.Single)">
            <summary>
            Starts the fade from color newScreenOverlayColor. If isFadeIn, start fully opaque, else start transparent.
            </summary>
            <param name='newScreenOverlayColor'>
            Target screen overlay Color.
            </param>
            <param name='fadeDuration'>
            Fade duration.
            </param>
        </member>
        <member name="M:CameraFade.StartAlphaFade(UnityEngine.Color,System.Boolean,System.Single,System.Single)">
            <summary>
            Starts the fade from color newScreenOverlayColor. If isFadeIn, start fully opaque, else start transparent, after a delay.
            </summary>
            <param name='newScreenOverlayColor'>
            New screen overlay color.
            </param>
            <param name='fadeDuration'>
            Fade duration.
            </param>
            <param name='fadeDelay'>
            Fade delay.
            </param>
        </member>
        <member name="M:CameraFade.StartAlphaFade(UnityEngine.Color,System.Boolean,System.Single,System.Single,System.Action)">
            <summary>
            Starts the fade from color newScreenOverlayColor. If isFadeIn, start fully opaque, else start transparent, after a delay, with Action OnFadeFinish.
            </summary>
            <param name='newScreenOverlayColor'>
            New screen overlay color.
            </param>
            <param name='fadeDuration'>
            Fade duration.
            </param>
            <param name='fadeDelay'>
            Fade delay.
            </param>
            <param name='OnFadeFinish'>
            On fade finish, doWork().
            </param>
        </member>
    </members>
</doc>
